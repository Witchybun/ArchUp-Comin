# Q. What is this file?
# A. This file contains options which allow you to configure your multiworld experience while allowing
#    others to play how they want as well.
#
# Q. How do I use it?
# A. The options in this file are weighted. This means the higher number you assign to a value, the
#    more chances you have for that option to be chosen. For example, an option like this:
#
#    map_shuffle:
#      on: 5
#      off: 15
#
#    Means you have 5 chances for map shuffle to occur, and 15 chances for map shuffle to be turned
#    off.
#
# Q. I've never seen a file like this before. What characters am I allowed to use?
# A. This is a .yaml file. You are allowed to use most characters.
#    To test if your yaml is valid or not, you can use this website:
#        http://www.yamllint.com/
#    You can also verify your Archipelago settings are valid at this site:
#        https://archipelago.gg/check

# Your name in-game. Spaces will be replaced with underscores and there is a 16-character limit.
#     {player} will be replaced with the player's slot number.
#     {PLAYER} will be replaced with the player's slot number, if that slot number is greater than 1.
#     {number} will be replaced with the counter value of the name.
#     {NUMBER} will be replaced with the counter value of the name, if the counter value is greater than 1.
name: Player{number}

# Used to describe your yaml. Useful if you have multiple files.
description: Default Raft Template

game: Raft
requires:
  version: 0.3.9 # Version of Archipelago required for this yaml to work as expected.

Raft:
  progression_balancing:
    # A system that can move progression earlier, to try and prevent the player from getting stuck and bored early.
    # A lower setting means more getting stuck. A higher setting means less getting stuck.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 99
    random: 0
    random-low: 0
    random-high: 0
    disabled: 0 # equivalent to 0
    normal: 50 # equivalent to 50
    extreme: 0 # equivalent to 99

  accessibility:
    # Set rules for reachability of your items/locations.
    # Locations: ensure everything can be reached and acquired.
    # Items: ensure all logically relevant items can be acquired.
    # Minimal: ensure what is needed to reach your goal can be acquired.
    locations: 0
    items: 50
    minimal: 0

  local_items:
    # Forces these items to be in their native world.
    []

  non_local_items:
    # Forces these items to be outside their native world.
    []

  start_inventory:
    # Start with these items.
    {}

  start_hints:
    # Start with these item's locations prefilled into the !hint command.
    []

  start_location_hints:
    # Start with these locations and their item prefilled into the !hint command
    []

  exclude_locations:
    # Prevent these locations from having an important item
    []

  priority_locations:
    # Prevent these locations from having an unimportant item
    []

  item_links:
    # Share part of your item pool with other players.
    []

  minimum_resource_pack_amount:
    # The minimum amount of resources available in a resource pack
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 15
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  maximum_resource_pack_amount:
    # The maximum amount of resources available in a resource pack
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 15
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  duplicate_items:
    # Adds duplicates of items to the item pool (if configured in Filler items). These will be selected alongside
    # Resource Packs (if configured). Note that there are not many progression items, and selecting Progression may
    # produce many of the same duplicate item.
    progression: 0
    non_progression: 0
    any: 50

  filler_item_types:
    # Determines whether to use Resource Packs, Duplicate Items (as configured), or both.
    resource_packs: 50
    duplicates: 0
    both: 0

  island_frequency_locations:
    # Sets where frequencies for story islands are located.
    vanilla: 0
    random_on_island: 0
    random_island_order: 50
    random_on_island_random_order: 0
    progressive: 0
    anywhere: 0

  island_generation_distance:
    # Sets how far away islands spawn from you when you input their coordinates into the Receiver.
    quarter: 0
    half: 0
    vanilla: 50
    double: 0
    quadrouple: 0

  expensive_research:
    # Makes unlocking items in the Crafting Table consume the researched items.
    false: 50
    true: 0

  progressive_items:
    # Makes some items, like the Bow and Arrow, progressive rather than raw unlocks.
    false: 0
    true: 50

  big_island_early_crafting:
    # Allows recipes that require items from big islands (eg leather) to lock earlygame items like the Receiver, Bolt,
    # or Smelter. Big islands are available from the start of the game, however it can take a long time to find them.
    false: 50
    true: 0

  paddleboard_mode:
    # Sets later story islands to in logic without an Engine or Steering Wheel. May require lots of paddling. Not
    # recommended.
    false: 50
    true: 0

  death_link:
    # When you die, everyone dies. Of course the reverse is true too.
    false: 50
    true: 0
